#!/usr/bin/env bash
#
# Clone a GIT Repository to user home
#
# Copyright (C) 2021  Gilbertsoft
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Force some bash options see https://gist.github.com/mohanpedala/1e2ff5661761d3abd0385e8223e16425
set -euo pipefail
IFS=$'\n\t'

# Activate debugging if $DEBUG is set to 1
DEBUG=${DEBUG:-}
[ -z "$DEBUG" ] & [ "${DEBUG}" == 1 ] && set -o xtrace


# Functions
show_header () {
    read -r -d '\0' header_message << EOM
GIT Installer Script  Copyright (C) 2021  Gilbertsoft LLC Switzerland

This program comes with ABSOLUTELY NO WARRANTY; for details type 'license'.
This is free software, and you are welcome to redistribute it
under certain conditions; type 'license' for details.
\0
EOM

    echo "$header_message"
    echo
}

show_help () {
    # Load help text into $HELP
    #read -d '' HELP <<EOF
    read -r -d '\0' help_message << EOM
Usage:
  $0 command [options] [arguments]

Options:
  -h, --help                Display this help message
      --license             Display the license
  -f, --force               Force the processing of the command
  -d, --working-dir <DIR>   If specified, use the given directory as working directory

Available commands:
  install   Clone and setup the configured repository
  update    Update the current repository

Examples:
  # Clone and setup the configured repository
  gis
  gis install

  # Update the respository
  gis update
\0
EOM

    echo "${help_message}"
}

show_license () {
    # Get the directory containing this script
    __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    cat $__dir/LICENSE
}

load_config () {
    echo "Loading configuration..."

    if [ -f ".env" ]; then
        echo "  - .env"
        source .env
    fi

    if [ -f ".env.local" ]; then
        echo "  - .env.local"
        source .env.local
    fi

    if [ -f ".env.${WEBSITE_CONTEXT}" ]; then
        echo "  - .env.${WEBSITE_CONTEXT}"
        source .env.${WEBSITE_CONTEXT}
    fi

    if [ -f ".env.${WEBSITE_CONTEXT}.local" ]; then
        echo "  - .env.${WEBSITE_CONTEXT}.local"
        source .env.${WEBSITE_CONTEXT}.local
    fi
}

check_config () {
    echo "Checking configuration..."

    GIS_REPOSITORY=${GIS_REPOSITORY:-}
    GIS_BRANCH=${GIS_BRANCH:-main}
    GIS_DESTINATION=${GIS_DESTINATION:-}
    GIS_SETUP=${GIS_SETUP:-setup}
    GIS_SETUP_OPTIONS=${GIS_SETUP_OPTIONS:-}

    if [ -z "$GIS_REPOSITORY" ]; then
        echo "Variable GIS_REPOSITORY is not set, aborting the installer. Please set it to the desired repository url before running the installer."
        exit 1
    fi    
}

# Change directory to the working directory
prepare_working_dir () {
    echo "Preparing working directoy '~/$working_dir'..."

    mkdir --parents ~/$working_dir
    cd ~/$working_dir
}

clone_repository() {
    # Check for an existing git repository
    if [ -d ".git" ] & [ "$force" == 1 ]; then
        rm -fr .git
    fi

    if [ -d ".git" ]; then
        echo "*****************************************************************************"
        echo "* A git repository already exists, the installer will use the current       *"
        echo "* branch to continue the setup process.                                     *"
        echo "*                                                                           *"
        echo "* If you like to do a fresh installation, run the following command:        *"
        echo "*                                                                           *"
        echo "*  'rm -fr .git && ./installer'                                             *"
        echo "*                                                                           *"
        echo "*****************************************************************************"
        echo
    else
        echo "Cloning repository '${GIS_REPOSITORY}' to '$PWD'..."

        # Clone the repository to tmp/gis
        git clone -q --depth=1 --branch=${GIS_BRANCH} ${GIS_REPOSITORY} tmp/gis

        # Move .git to current directory and remove tmp/gis
        mv tmp/gis/.git .git
        rm -fr tmp/gis
    fi

    # Reset hard and update
    update_repository
}

update_repository () {
    echo "Updating repository..."

    git reset -q --hard
    git pull -q
}

# Register cron job for updates
setup_update () {
    if [ "$no_updates" == 1 ]; then
        echo "Not setting up update job"
        return
    fi

    if [ ! -f ".gisupdate" ]; then
        echo "Setting up update job..."

        (crontab -l && echo -e "\t0\t1\t*\t*\t*\tgis update -d ~/$working_dir >/dev/null") | crontab -
        touch .gisupdate
    fi
}

# Run setup script
post_setup () {
    if [ -f "${GIS_SETUP}" ]; then
        echo "Running setup script '${GIS_SETUP} ${GIS_SETUP_OPTIONS}'..."

        . ./${GIS_SETUP} ${GIS_SETUP_OPTIONS}
    fi
}


# Main
show_header
load_config
check_config

# Set defaults
command=install
help=0
license=0
working_dir=${GIS_DESTINATION}
force=0
no_updates=0

# Process arguments
invalid_options=()
invalid_command=""

while :; do
    case ${1:-} in
        # End of all options
        --) 
            shift
            break
            ;;

        # Special options
        -h | -\? | --help | help)
            help=1
            break
            ;;
        --license | license)
            license=1
            break
            ;;

        # Options
        -d | --working-dir)
            shift
            working_dir=$1
            ;;
        -f | --force)
            force=1
            ;;
        --no-updates)
            no_updates=1
            ;;

        # Unknown option
        -?*)
            invalid_options+=($1)
            ;;

        # Command
        install | update)
            command=$1
            ;;

        # Unknown command
        ?*)
            invalid_command=$1
            break
            ;;

        # Default case: No more options, so break out of the loop
        *)  
            break
    esac

    shift
done

# Show help and exit on invalid options
if [ ${#invalid_options[@]} -ne 0 ]; then
    echo
    echo "Invalid option(s):" >&2
    for I in "${invalid_options[@]}"; do
        echo "  ${I}" >&2
    done
    echo

    show_help
    exit 1
fi

# Show help and exit on invalid command
if [ -n "${invalid_command}" ]; then
    echo
    echo "Invalid command:" >&2
    echo "  ${invalid_command}" >&2
    echo

    show_help
    exit 1
fi

# Show help if requested and exit
if [ "${help}" == 1 ]; then
    echo
    show_help
    exit 0
fi

# Show license if requested and exit
if [ "${license}" == 1 ]; then
    echo
    show_license
    exit 0
fi

# Change directory to the working directory
prepare_working_dir

# Process command
case ${command:-} in
    install)
        clone_repository
        setup_update
        post_setup
        ;;
    update)
        update_repository
        post_setup
        ;;
    *)
        # Should never get reached
        printf 'WARNING: Unknown command: %s\n' "$command" >&2
        exit 1
        ;;
esac
